"""
Stride
------

- a "Team" is synonymous with a "cloudId" and represents a unique Stride tenant
- a "Conversation" is synonymous with a "channel" or "direct message" in other platforms
- authentication happens using Atlassian Connect, and is initiatied on Atlassians side.

Develop
=======

Developing against Stride will require you to create an Atlassian App unique to your
machine. The need for uniqueness comes from the fact that you'll need to expose an `ngrok`
endpoint.

# Create an app: https://developer.atlassian.com/apps/create
# Ensure `system.url-prefix` maps to your ngrok prefix
  - $ sentry config set system.url-prefix {ngrokUrl}
# Fill in details:
  - Descriptor URL: {ngrokUrl}/extensions/stride/descriptor/
# Configure credentials in Sentry:
  - $ sentry config set stride.client-id {clientId}
  - $ sentry config set stride.client-secret {clientSecret}

Stride works like this:

- Add Sentry to a conversation (e.g. via the app store in Stride)
- Decide what kind of notifications will be present in that conversation (likely different than our current rules system)
- When Sentry wants to send a notification, it will use an access token which is generated by an API request
  curl --request POST \
    --url 'https://api.atlassian.com/oauth/token' \
    --header 'content-type: application/json' \
    --data '{"grant_type":"client_credentials","client_id": "{clientId}", "client_secret": "{clientSecret}"}'
- The access token works like a standard bearer token but is coupled to the application rather than a user

TODO

- Determine if we can use Stride in the rule builder in any reasonable fashion. It would require us to be able to arbitrarily register Sentry in different Stride conversations.
"""

from __future__ import absolute_import

from sentry.utils.imports import import_submodules
from sentry.rules import rules

from .notify_action import StrideNotifyServiceAction

import_submodules(globals(), __name__, __path__)

rules.add(StrideNotifyServiceAction)
